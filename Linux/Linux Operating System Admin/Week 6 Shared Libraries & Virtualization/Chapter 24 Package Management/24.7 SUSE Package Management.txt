24.7 SUSE Package Management

Several distributions use the ZYpp/libzypp package management engine, which primarily runs on openSUSE, SUSE Linux Enterprise, and Ark. Libzypp is the merged result of Ximian’s Red Carpet and SUSE’s YaST software management engines. Libzypp was designed to perform as the software package management scheme for SUSE products as well as the failed and now mostly dormant Zenworks Linux Management suite from Novell.

What the APT system and .deb packages are on the Debian/Ubuntu side, Libzypp and zypper are to the RPM side of package management on the SUSE platform. The need to query, install, remove, and update software packages is universal, as well as the all-important ability to satisfy software dependencies during these actions.

The underlying dependency or satisfiability solver technology is the key to successfully being able to perform package management tasks on systems that can contain anywhere from hundreds to many thousands of individual packages, all with many dependencies on each other.

For example, the libc library on a Linux system is a dependency for almost every other package subsequently installed. If libc is absent or incorrectly versioned, it could be catastrophic to the entire system.

When a system is installed, the software packages must be installed in an exact order that ensures all dependencies are resolved. This is difficult enough at installation. Updating hundreds of packages is especially challenging on a running system that is a critical part of a company’s infrastructure.

While ZYpp/libzypp is the background package management engine, which is in charge of satisfying the dependencies between packages, most system operators will interact mainly with the zypper command line tool.

An important part of software management is the concept of repositories, which are essentially a shared network resource or local directory that provides a location for searching for software to install and update. Repositories come in several varieties, the first being those that are official and supported, such as the subscription channels/repositories that the SCC (SUSE Customer Center) provides for those with support subscriptions.

The next variety is a 3rd-party repository. An excellent example of this is the Packman repository for the openSUSE community, where a lot of software that is not part of the official openSUSE or SUSE Linux Enterprise distributions can be found.

The last variety is the local mirror or synchronized repository that an organization will use to maintain a local copy of the software that can be used by their internal or public-facing systems. The advantage of this third variety is that it keeps the number of hosts that query and mirror from the official software repositories to as low a number as possible. This is useful because the various supported subscription-based distributions all highly recommend a mirror or sync server.

The command-line zypper tool's relationship to the rpm command is roughly analogous to the relationship between the apt-get tool’s relationship to the dpkg command. The zypper command is used to query, install, remove, update, manage repositories, and more; it depends on the rpm command’s abilities to accomplish most of these tasks.

For example, a system operator could install a package with the rpm command, but if it had several dependencies, the system operator must then determine what packages are additionally needed and then install the dependencies and the initial package in the exact right order to be successful.

Using zypper to install the same package is much easier, as it will do the hard work of reading the desired package’s dependencies, query the database of installed packages for those, and if they are not found, determine which software repository from the list of configured repositories that they may be obtained from. Then, the zypper command will inform the system operator of what is needed to install the desired package successfully.

The syntax used for the zypper command examples in this course is the following:

zypper [--GLOBAL-OPTS] COMMAND [--COMMAND-OPTS] [COMMAND-ARGUMENTS]

To learn more about the zypper command’s syntax and usage, use the zypper help command:

localhost:~ # zypper help

Note

The zypper command is not installed in the virtual environment provided in this chapter. The following examples represent a system that is different from the virtual machine in this chapter. As such, the examples in the following sections may not match the output in our virtual environment.

Additional practice for the zypper command is provided in the lab.

