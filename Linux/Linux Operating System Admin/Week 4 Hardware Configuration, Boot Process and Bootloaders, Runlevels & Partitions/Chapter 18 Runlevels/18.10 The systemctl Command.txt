18.10 The systemctl Command

The systemctl command is used in systems that have systemd as a replacement for the traditional init process. This one command can be used to manually control the state of services, enable or disable automatic starting of services, as well as change system targets.

The systemctl command looks in the /usr/lib/systemd directory for information about which symbolic link enables a specific service. This directory is where a service’s files are originally placed when it is installed.

It is also possible to edit service files in order to modify the service; however, these changes should be made to service files found in the /etc/systemd directory instead.

To manually control the state of a service, use the systemctl command to start, stop, or check the status of that service. For example, to start a service like the web server, execute the following:

systemctl start httpd.service

To shut down the service:

systemctl stop httpd.service

To check the state of the service:

systemctl status httpd.service

To view the status of all services:

systemctl -a
systemctl --all

To configure a service to start automatically, execute the following:

systemctl enable httpd.service

To configure a service not to start automatically, execute the following:

systemctl disable httpd.service

As previously mentioned, it is possible to change to a different runlevel with the systemctl command:

systemctl isolate DESIRED.TARGET

The systemctl command can also manage the low or no power states of the system with command lines such as:

systemctl hibernate
systemctl suspend
systemctl poweroff
systemctl reboot

When enabling a service with systemd by executing a command such as the following, a symbolic link is created within the target level that “wants” to have that service running:

[root@localhost ~]# systemctl enable named.service

In this example, the previous systemctl command runs the following command:

[root@localhost ~]# ln -s /usr/lib/systemd/system/named.service
/etc/systemd/system/mulit-user.target.wants/

The reason that multi-user.target wants the named.service to be running is based on a line within the named.service file that contains the following:

WantedBy=multi-user.target

In essence, this line sets the only target that will normally start up this service automatically. If the administrator modifies the target that WantedBy is set to, then the next time that service is enabled, the symbolic link that enables the service will be made to the new target that wants the service.

For example, if the line for the named.service in the /usr/lib/systemd/system/named.service file is updated to be the following:

WantedBy=graphical.target

Then, after executing the systemctl disable named.service and systemctl enable named.service commands, the link to start the named service is created in the /etc/systemd/system/graphical.target.wants directory and the service will be started when the system is going to the graphical.target instead of the multi-user.target.

Similar to the chkconfig --list command, all the services that are supposed to be enabled for a specific target within systemd can be viewed by using a systemctl list-dependencies command for that target, such as:

[root@localhost ~]# systemctl list-dependencies graphical.target

The partial output below shows each level of wanted services below a target and the dependencies between each target indented. You see services like atieventsd.service and gdm.service are wanted by the graphical.target.

Also, the graphical.target depends on the multi-user.target and the multi-user.target wants the services abrt-ccpp.service and abrt-oops.service.

The actual output shows many more services and targets.

[root@localhost ~]# systemctl list-dependencies graphical.target
graphical.target
├─atieventsd.service
├─gdm.service
├─jexec.service
├─systemd-readahead-collect.service
├─systemd-readahead-replay.service
├─systemd-update-utmp-runlevel.service
 ├─abrt-ccps.service
 ├─abrt-oops.service

Consider This

Because there are three different types of boot systems, traditional init, Upstart and systemd, the logical question is, "Which one does my system use?" The easy answer to this question is to check for the existence of two directories: the /etc/init and the /etc/systemd directory.

If your system has a /etc/init directory, then your system is using Upstart. If your system has a /etc/systemd directory, then your system is using systemd. Otherwise, your system is using traditional init.
