13.4.2 Octal Method

Using the octal method requires that the permissions for all three sets be specified. It is based on the octal numbering system in which each permission type is assigned a numeric value:
Octal Value 	Permission
4 	read
2 	write
1 	execute
0 	none

By adding together the combination of numbers from 0 to 7, any possible combination of read, write, and execute permissions can be specified for a single permission group set. For example:
Octal Value 	Permission Set
7 	rwx
6 	rw-
5 	r-x
4 	r--
3 	-wx
2 	-w-
1 	--x
0 	---

These numbers are easy to derive by just adding together the octal value for the permissions shown. So, for read, write, and execute: add 4 + 2 + 1 to get 7. Or, for read, not write, and execute: add 4 + 0 + 1 to get 5.

Follow Along

To execute the following examples, create a file called sample.txt in your home directory. You will use this file to practice the octal method technique for changing permissions:

sysadmin@localhost:~$ touch sample.txt
sysadmin@localhost:~$ ls -l sample.txt
-rw-rw-r-- 1 sysadmin sysadmin 0 May  3 23:41 sample.txt

To demonstrate, set the permissions of a file to rwxr-xr-x. Using the values found in the previous table, this would calculate as 7 for the user owner's permission, 5 for the group owner's permissions, and 5 for others:

sysadmin@localhost:~$ chmod 755 sample.txt
sysadmin@localhost:~$ ls -l sample.txt
-rwxr-xr-x 1 sysadmin sysadmin 0 May  3 23:41 sample.txt

Note

It’s good practice to specify the octal value for all three permission groups, like we’ve done in our examples. However, if any digits are left off, they are assumed to be leading zeros.

To change permissions to rwxrw-r--:

sysadmin@localhost:~$ chmod 764 sample.txt
sysadmin@localhost:~$ ls -l sample.txt
-rwxrw-r-- 1 sysadmin sysadmin 0 May  3 23:41 sample.txt

To change permissions to rw-r--r--:

sysadmin@localhost:~$ chmod 644 sample.txt
sysadmin@localhost:~$ ls -l sample.txt
-rw-r--r-- 1 sysadmin sysadmin 0 May  3 23:41 sample.txt

To change permissions to rwxr--r--:

sysadmin@localhost:~$ chmod 744 sample.txt
sysadmin@localhost:~$ ls -l sample.txt
-rwxr--r-- 1 sysadmin sysadmin 0 May  3 23:41 sample.txt

To change permissions to ---------:

sysadmin@localhost:~$ chmod 000 sample.txt
sysadmin@localhost:~$ ls -l sample
---------- 1 sysadmin sysadmin 0 Mar 21 18:17 sample.txt

Considering the last example, what can be done with a file if there are no permissions for anyone on the file? The owner of the file can always use the chmod command at some point in the future to grant permissions on the file. Also, with the write and execute permissions -wx on the directory that contains this file, a user can also remove it with the rm command.

In the following example, the permissions of the sample file that were created previously are modified using the octal method:

sysadmin@localhost:~/Documents$ ls -l sample.txt
---------- 1 sysadmin sysadmin 0 Mar 21 18:17 sample.txt
sysadmin@localhost:~/Documents$ chmod 754 sample.txt
sysadmin@localhost:~/Documents$ ls -l sample.txt
-rwxr-xr-- 1 sysadmin sysadmin 0 Mar 21 18:17 sample.txt

Consider This

Recall that the stat command provides more detailed information than the ls -l command. Because of this, you may consider using the stat command instead of the ls -l command when viewing permissions on a file. One big advantage of the stat command is that it shows permissions using both the symbolic and numeric methods, as highlighted below:

sysadmin@localhost:~$ stat /tmp/filetest1
  File: `/tmp/filetest1'
  Size: 0         	Blocks: 0          IO Block: 4096   regular empty file
Device: fd00h/64768d	Inode: 31477       Links: 1
Access: (0664/-rw-rw-r--)  Uid: (  502/sysadmin)   Gid: (  503/sysadmin)
Access: 2013-10-21 10:18:02.809118163 -0700
Modify: 2013-10-21 10:18:02.809118163 -0700
Change: 2013-10-21 10:18:02.809118163 -0700

